package eu.rekawek.radioblock.standalone.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import eu.rekawek.radioblock.standalone.PlayerPrefs;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;

public class PlayerWindow extends JFrame {
    private JButton startButton;
    private JButton stopButton;
    private JSlider openingThreshold;
    private JSlider closingThreshold;
    private JLabel nextJingleType;
    private JLabel openingMaxRecentValueLabel;
    private JLabel openingThresholdLabel;
    private JLabel closingMaxRecentValueLabel;
    private JLabel closingThresholdLabel;
    private JPanel rootPanel;
    private JProgressBar closingMaxRecentValue;
    private JProgressBar openingMaxRecentValue;

    private PlayerWindowListener listener = new PlayerWindowListener() {
    };

    public PlayerWindow(PlayerPrefs prefs) {
        super("Radioblock");
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        setLocationRelativeTo(null);
        setContentPane(rootPanel);
        pack();
        setResizable(false);
        setVisible(prefs.isShowWindow());

        openingThreshold.setValue(prefs.getOpeningThreshold());
        openingThresholdLabel.setText(String.valueOf(prefs.getOpeningThreshold()));
        openingThreshold.addChangeListener(e -> {
            int newValue = ((JSlider) e.getSource()).getValue();
            listener.thresholdChanged(0, newValue);
            openingThresholdLabel.setText(String.valueOf(newValue));
        });

        closingThreshold.setValue(prefs.getClosingThreshold());
        closingThresholdLabel.setText(String.valueOf(prefs.getClosingThreshold()));
        closingThreshold.addChangeListener(e -> {
            int newValue = ((JSlider) e.getSource()).getValue();
            listener.thresholdChanged(1, newValue);
            closingThresholdLabel.setText(String.valueOf(newValue));
        });
        startButton.addActionListener(e -> listener.startPlayer());
        stopButton.addActionListener(e -> listener.stopPlayer());

        toggleButton(true);
        setNextJingleType(0);
        setRecentMaxValue(0, 0);
        setRecentMaxValue(1, 0);
    }

    public void setListener(PlayerWindowListener listener) {
        this.listener = listener;
    }

    public void toggleButton(boolean startEnabled) {
        startButton.setEnabled(startEnabled);
        stopButton.setEnabled(!startEnabled);
    }

    public void setNextJingleType(int jingleIndex) {
        nextJingleType.setText(jingleIndex == 0 ? "opening jingle" : "closing jingle");
    }

    public void setRecentMaxValue(int jingleIndex, int newLevel) {
        JLabel label = jingleIndex == 0 ? openingMaxRecentValueLabel : closingMaxRecentValueLabel;
        JProgressBar progressBar = jingleIndex == 0 ? openingMaxRecentValue : closingMaxRecentValue;
        label.setText(String.valueOf(newLevel));
        progressBar.setValue(newLevel);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(4, 1, new Insets(5, 5, 5, 5), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        startButton = new JButton();
        startButton.setText("Start");
        panel1.add(startButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        stopButton = new JButton();
        stopButton.setText("Stop");
        panel1.add(stopButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        rootPanel.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Waiting for:");
        panel2.add(label1);
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1);
        nextJingleType = new JLabel();
        nextJingleType.setText("opening jingle");
        panel2.add(nextJingleType);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new BorderLayout(0, 0));
        rootPanel.add(panel3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel3.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "Opening jingle", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$(null, -1, -1, panel3.getFont())));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridBagLayout());
        panel3.add(panel4, BorderLayout.CENTER);
        final JLabel label2 = new JLabel();
        label2.setText("Maximum recent value:");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel4.add(label2, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel4.add(spacer2, gbc);
        final JLabel label3 = new JLabel();
        label3.setText("Threshold:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        panel4.add(label3, gbc);
        openingThresholdLabel = new JLabel();
        openingThresholdLabel.setText("100");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        panel4.add(openingThresholdLabel, gbc);
        openingThreshold = new JSlider();
        openingThreshold.setMaximum(999);
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.weightx = 3.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel4.add(openingThreshold, gbc);
        openingMaxRecentValueLabel = new JLabel();
        openingMaxRecentValueLabel.setText("123");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel4.add(openingMaxRecentValueLabel, gbc);
        openingMaxRecentValue = new JProgressBar();
        openingMaxRecentValue.setMaximum(999);
        openingMaxRecentValue.setMinimum(0);
        openingMaxRecentValue.setStringPainted(false);
        openingMaxRecentValue.setValue(500);
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 15, 0, 15);
        panel4.add(openingMaxRecentValue, gbc);
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new BorderLayout(0, 0));
        rootPanel.add(panel5, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel5.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "Closing jingle"));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridBagLayout());
        panel5.add(panel6, BorderLayout.CENTER);
        final JLabel label4 = new JLabel();
        label4.setText("Maximum recent value:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        panel6.add(label4, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel6.add(spacer3, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel6.add(spacer4, gbc);
        closingThresholdLabel = new JLabel();
        closingThresholdLabel.setText("120");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        panel6.add(closingThresholdLabel, gbc);
        final JLabel label5 = new JLabel();
        label5.setText("Threshold:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        panel6.add(label5, gbc);
        closingThreshold = new JSlider();
        closingThreshold.setMaximum(999);
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 1;
        gbc.weightx = 3.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel6.add(closingThreshold, gbc);
        closingMaxRecentValueLabel = new JLabel();
        closingMaxRecentValueLabel.setText("150");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel6.add(closingMaxRecentValueLabel, gbc);
        closingMaxRecentValue = new JProgressBar();
        closingMaxRecentValue.setMaximum(999);
        closingMaxRecentValue.setMinimum(0);
        closingMaxRecentValue.setValue(100);
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 15, 0, 15);
        panel6.add(closingMaxRecentValue, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    public interface PlayerWindowListener {

        default void startPlayer() {
        }

        default void stopPlayer() {
        }

        default void thresholdChanged(int jingleIndex, int newLevel) {
        }
    }
}
